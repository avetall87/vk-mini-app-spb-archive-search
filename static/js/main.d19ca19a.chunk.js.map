{"version":3,"sources":["img/persik.png","panels/Home.js","panels/Persik.js","App.js","index.js"],"names":["module","exports","Home","id","go","fetchedUser","useState","getName","setName","getSwapiId","setSwapiId","useEffect","swapi","a","fetch","response","json","text","name","title","before","photo_200","src","description","city","first_name","last_name","size","level","onClick","data-to","type","value","onChange","event","target","style","display","padding","margin","justifyContent","osName","platform","Persik","props","left","IOS","className","persik","alt","App","activePanel","setActivePanel","setUser","popout","setPopout","bridge","send","user","subscribe","detail","data","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,oC,8pBCkG5BC,EApFF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,YAAiB,EAETC,mBAAS,IAFA,mBAE7BC,EAF6B,KAEpBC,EAFoB,OAGHF,mBAAS,GAHN,mBAG7BG,EAH6B,KAGjBC,EAHiB,KAKpCC,qBAAU,WACNH,EAAQ,MACT,IAEH,IAAMI,EAAK,uCAAG,8BAAAC,EAAA,sEACWC,MAAM,gCAAD,OAAiCL,EAAjC,MADhB,cACNM,EADM,gBAEOA,EAASC,OAFhB,OAENC,EAFM,OAGVT,EAAQS,EAAKC,MAHH,2CAAH,qDAeX,OAAQ,kBAAC,IAAD,CAAOf,GAAIA,GACX,kBAAC,IAAD,6CACCE,GACD,kBAAC,IAAD,CAAOc,MAAM,oCACT,kBAAC,IAAD,CACIC,OAAQf,EAAYgB,UAAY,kBAAC,IAAD,CAAQC,IAAKjB,EAAYgB,YAAe,KACxEE,YAAalB,EAAYmB,MAAQnB,EAAYmB,KAAKL,MAAQd,EAAYmB,KAAKL,MAAQ,IAFvF,UAIQd,EAAYoB,WAJpB,YAIkCpB,EAAYqB,aAIlD,kBAAC,IAAD,CAAOP,MAAM,2FACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQQ,KAAK,KAAKC,MAAM,IAAIC,QAASzB,EAAI0B,UAAQ,UAAjD,8JAIA,6BACA,6BACA,2IACA,kBAAC,IAAD,CAAO3B,GAAG,eAAe4B,KAAK,SAASC,MAAOvB,EAAYwB,SAzBpD,SAACC,GACnBxB,EAAWwB,EAAMC,OAAOH,UA0BZ,6BACA,6BAEA,yBAAKI,MAAO,CAACC,QAAS,OAAQC,QAAS,OAAQC,OAAQ,OAAQC,eAAgB,kBAC3E,kBAAC,IAAD,CAAQZ,MAAM,IAAIC,QAASjB,GAA3B,kCAIA,kBAAC,IAAD,CAAQgB,MAAM,IAAIC,QAxCxB,WACVrB,EAAQ,IACRE,EAAW,KAsCK,qDAKJ,6BACA,6BAEA,kBAAC,IAAD,CAAM0B,MAAO,CAACC,QAAS,OAAQG,eAAgB,WAA/C,0CAAoEjC,O,gFCjElFkC,G,OAASC,eAoBAC,EAlBA,SAAAC,GAAK,OACnB,kBAAC,IAAD,CAAOzC,GAAIyC,EAAMzC,IAChB,kBAAC,IAAD,CACC0C,KAAM,kBAAC,IAAD,CAAmBhB,QAASe,EAAMxC,GAAI0B,UAAQ,QAClDW,IAAWK,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAF3C,wCAOA,yBAAKC,UAAU,SAASzB,IAAK0B,IAAQC,IAAI,qBCmB5BC,EAjCH,WAAO,IAAD,EACqB5C,mBAAS,QAD9B,mBACV6C,EADU,KACGC,EADH,OAEc9C,mBAAS,MAFvB,mBAEVD,EAFU,KAEGgD,EAFH,OAGW/C,mBAAS,kBAAC,IAAD,CAAeqB,KAAK,WAHxC,mBAGV2B,EAHU,KAGFC,EAHE,KAKjB5C,qBAAU,WAAM,4CAQf,4BAAAE,EAAA,sEACoB2C,IAAOC,KAAK,uBADhC,OACOC,EADP,OAECL,EAAQK,GACRH,EAAU,MAHX,4CARe,sBACfC,IAAOG,WAAU,YAAgC,IAAD,IAA5BC,OAAU7B,EAAkB,EAAlBA,KAAM8B,EAAY,EAAZA,KACnC,GAAa,yBAAT9B,EAAiC,CACpC,IAAM+B,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgB9B,MAAQ6B,EAAKI,OAASJ,EAAKI,OAAS,eACpDF,SAASG,KAAKC,WAAWC,aAAaN,OALzB,mCAafO,KACE,IAEH,IAAMjE,EAAK,SAAAkE,GACVlB,EAAekB,EAAEC,cAAcC,QAAQC,KAGxC,OACC,kBAAC,IAAD,CAAMtB,YAAaA,EAAaG,OAAQA,GACvC,kBAAC,EAAD,CAAMnD,GAAG,OAAOE,YAAaA,EAAaD,GAAIA,IAC9C,kBAAC,EAAD,CAAQD,GAAG,SAASC,GAAIA,MC7B3BoD,IAAOC,KAAK,gBAEZiB,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,W","file":"static/js/main.d19ca19a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport bridge from \"@vkontakte/vk-bridge\";\nimport Text from \"@vkontakte/vkui/dist/components/Typography/Text/Text\";\nimport Input from \"@vkontakte/vkui/dist/components/Input/Input\";\n\n\nconst Home = ({id, go, fetchedUser}) => {\n\n    const [getName, setName] = useState('');\n    const [getSwapiId, setSwapiId] = useState(1);\n\n    useEffect(() => {\n        setName('');\n    }, []);\n\n    const swapi = async () => {\n        let response = await fetch(`https://swapi.dev/api/people/${getSwapiId}/`);\n        let text = await response.json();\n        setName(text.name);\n    }\n\n    const reset = () => {\n        setName('');\n        setSwapiId(1);\n    }\n\n    const onLabelChange = (event) => {\n        setSwapiId(event.target.value);\n    };\n\n    return (<Panel id={id}>\n            <PanelHeader>Пример</PanelHeader>\n            {fetchedUser &&\n            <Group title=\"User Data Fetched with VK Bridge\">\n                <Cell\n                    before={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n                    description={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n                >\n                    {`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n                </Cell>\n            </Group>}\n\n            <Group title=\"Тестовые кнопки )\">\n                <Div>\n                    <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"persik\">\n                        Покажи мне персик, пожалуйста\n                    </Button>\n\n                    <br/>\n                    <br/>\n                    <h3>Найти персонажа swapi по id</h3>\n                    <Input id=\"swapiIdInput\" type=\"number\" value={getSwapiId} onChange={onLabelChange}/>\n\n                    <br/>\n                    <br/>\n\n                    <div style={{display: \"flex\", padding: \"10px\", margin: \"10px\", justifyContent: \"space-between\"}}>\n                        <Button level=\"2\" onClick={swapi}>\n                            Найти\n                        </Button>\n\n                        <Button level=\"2\" onClick={reset}>\n                            Сбросить\n                        </Button>\n                    </div>\n\n                    <br/>\n                    <br/>\n\n                    <Text style={{display: \"flex\", justifyContent: \"center\"}}>Его имя: {getName}</Text>\n\n                </Div>\n            </Group>\n        </Panel>\n    )\n};\n\nHome.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n};\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { platform, IOS } from '@vkontakte/vkui';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport persik from '../img/persik.png';\nimport './Persik.css';\n\nconst osName = platform();\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</PanelHeaderButton>}\n\t\t>\n\t\t\tПерсик\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik;\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport Persik from './panels/Persik';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t<Persik id='persik' go={go} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}